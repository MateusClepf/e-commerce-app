openapi: 3.0.0
components:
  schemas:
    # User schema
    User:
      type: object
      required:
        - id
        - email
        - username
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
        email:
          type: string
          format: email
          description: User's email address
        username:
          type: string
          description: User's username
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        phone:
          type: string
          description: User's phone number
        isAdmin:
          type: boolean
          default: false
          description: Whether the user has admin privileges
        createdAt:
          type: string
          format: date-time
          description: When the user was created
        updatedAt:
          type: string
          format: date-time
          description: When the user was last updated

    UserCredentials:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      
    # Product schema
    Product:
      type: object
      required:
        - id
        - name
        - price
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the product
        name:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        price:
          type: number
          format: float
          description: Product price
        category:
          type: string
          description: Product category
        images:
          type: array
          items:
            type: string
            format: uri
          description: URLs to product images
        inStock:
          type: boolean
          default: true
          description: Whether the product is in stock
        quantity:
          type: integer
          minimum: 0
          description: Available quantity
        createdAt:
          type: string
          format: date-time
          description: When the product was created
        updatedAt:
          type: string
          format: date-time
          description: When the product was last updated
    
    ProductList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        total:
          type: integer
          description: Total number of products available
        page:
          type: integer
          description: Current page number
        limit:
          type: integer
          description: Number of items per page
    
    # Order schema
    Order:
      type: object
      required:
        - id
        - userId
        - items
        - totalAmount
        - status
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the order
        userId:
          type: string
          format: uuid
          description: ID of the user who placed the order
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        totalAmount:
          type: number
          format: float
          description: Total amount of the order
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
          description: Current status of the order
        shippingAddress:
          $ref: '#/components/schemas/Address'
        billingAddress:
          $ref: '#/components/schemas/Address'
        paymentMethod:
          type: string
          enum: [credit_card, debit_card, paypal]
          description: Payment method used
        createdAt:
          type: string
          format: date-time
          description: When the order was created
        updatedAt:
          type: string
          format: date-time
          description: When the order was last updated
    
    # Error response
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          description: Error code
        message:
          type: string
          description: Error message

    # Additional schemas
    OrderItem:
      type: object
      required:
        - productId
        - quantity
        - price
      properties:
        productId:
          type: string
          format: uuid
          description: ID of the product
        name:
          type: string
          description: Product name at time of order
        quantity:
          type: integer
          minimum: 1
          description: Quantity ordered
        price:
          type: number
          format: float
          description: Price per unit at time of order
        totalPrice:
          type: number
          format: float
          description: Total price for this item (quantity * price)
    
    Cart:
      type: object
      required:
        - id
        - userId
        - items
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the cart
        userId:
          type: string
          format: uuid
          description: ID of the user who owns the cart
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        totalAmount:
          type: number
          format: float
          description: Total amount of items in cart
        createdAt:
          type: string
          format: date-time
          description: When the cart was created
        updatedAt:
          type: string
          format: date-time
          description: When the cart was last updated
    
    CartItem:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          type: string
          format: uuid
          description: ID of the product
        product:
          $ref: '#/components/schemas/Product'
        quantity:
          type: integer
          minimum: 1
          description: Quantity in cart
    
    Address:
      type: object
      required:
        - street
        - city
        - zipCode
        - country
      properties:
        street:
          type: string
          description: Street address
        city:
          type: string
          description: City
        state:
          type: string
          description: State or province
        zipCode:
          type: string
          description: ZIP or postal code
        country:
          type: string
          description: Country
    
    Token:
      type: object
      required:
        - accessToken
        - tokenType
      properties:
        accessToken:
          type: string
          description: JWT access token
        tokenType:
          type: string
          enum: [bearer]
          description: Type of token
        expiresIn:
          type: integer
          description: Token expiration time in seconds
        refreshToken:
          type: string
          description: Refresh token to get a new access token

  # Parameter definitions that can be reused
  parameters:
    offsetParam:
      name: offset
      in: query
      description: Number of items to skip before returning the results
      schema:
        type: integer
        default: 0
    limitParam:
      name: limit
      in: query
      description: Maximum number of items to return
      schema:
        type: integer
        default: 10

  # Response definitions that can be reused
  responses:
    Unauthorized:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: The request contains invalid parameters or payload
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error' 